---
import { useI18n } from '../i18n/hooks';
import { languages, defaultLang, type Lang } from '../i18n/config';
import { getRouteFromUrl } from '../i18n/utils';

const { url } = Astro;
const { lang, t } = useI18n(url);
const route = getRouteFromUrl(url);

const languageOptions = Object.entries(languages).map(([code, name]) => ({
  code: code as Lang,
  name,
}));
---

<label class="language-select-wrapper">
  <span class="sr-only">{t('selectLanguage')}</span>
  <svg aria-hidden="true" class="icon label-icon" width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
    <path fill-rule="evenodd" d="M8.516 3a.94.94 0 0 0-.941.94v1.15H2.94a.94.94 0 1 0 0 1.882h7.362a7.422 7.422 0 0 1-1.787 3.958 7.42 7.42 0 0 1-1.422-2.425.94.94 0 1 0-1.774.627 9.303 9.303 0 0 0 1.785 3.043 7.422 7.422 0 0 1-4.164 1.278.94.94 0 1 0 0 1.881 9.303 9.303 0 0 0 5.575-1.855 9.303 9.303 0 0 0 4.11 1.74l-.763 1.525a.968.968 0 0 0-.016.034l-1.385 2.77a.94.94 0 1 0 1.683.841l1.133-2.267h5.806l1.134 2.267a.94.94 0 0 0 1.683-.841l-1.385-2.769a.95.95 0 0 0-.018-.036l-3.476-6.951a.94.94 0 0 0-1.682 0l-1.82 3.639a7.423 7.423 0 0 1-3.593-1.256 9.303 9.303 0 0 0 2.27-5.203h1.894a.94.94 0 0 0 0-1.881H9.456V3.94A.94.94 0 0 0 8.516 3Zm6.426 11.794a1.068 1.068 0 0 1-.02.039l-.703 1.407h3.924l-1.962-3.924-1.24 2.478Z" clip-rule="evenodd"></path>
  </svg>
  <select value={lang}>
    {languageOptions.map((option) => (
      <option value={option.code} selected={lang === option.code}>
        {option.name}

      </option>
    ))}
  </select>
  <svg aria-hidden="true" class="icon caret" width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
    <path d="M17 9.17a1 1 0 0 0-1.41 0L12 12.71 8.46 9.17a1 1 0 1 0-1.41 1.42l4.24 4.24a1.002 1.002 0 0 0 1.42 0L17 10.59a1.002 1.002 0 0 0 0-1.42Z"></path>
  </svg>
</label>

<script>
  const select = document.querySelector('.language-select-wrapper select');
  select.addEventListener('change', (event) => {
    const newLang = event.target.value;
    const [, , ...rest] = window.location.pathname.split('/');
    const newPathname = `/${newLang}${rest.length > 0 ? '/' + rest.join('/') : ''}`;
    window.location.pathname = newPathname;
  });
</script>

<style>
  .language-select-wrapper {
    --sl-select-width: 6em;
    position: relative;
    display: flex;
    align-items: center;
    gap: 0.25rem;
    cursor: pointer;
  }

  .icon {
    --sl-icon-size: 1em;
    width: var(--sl-icon-size);
    height: var(--sl-icon-size);
  }

  .label-icon {
    opacity: 0.8;
  }

  select {
    appearance: none;
    background: transparent;
    border: 0;
    border-radius: 0;
     padding: 0.25em 1.5em 0.25em 0.5em;
    font-family: inherit;
    font-size: 1rem;
    line-height: 1.4;
    color: inherit;
    width: var(--sl-select-width);
    cursor: inherit;
     white-space: nowrap; /* 防止文本换行 */
    overflow: hidden; /* 隐藏溢出部分 */
    text-overflow: ellipsis; /* 文本溢出时显示省略号 */
  }

  select::-ms-expand {
    display: none;
  }

  .caret {
    position: absolute;
    right: 0.5em;
    pointer-events: none;
  }

  @media (forced-colors: active) {
    .icon {
      fill: CanvasText;
    }
  }
</style>

