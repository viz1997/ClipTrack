---
import { languages, type Lang } from '../../i18n/ui';
import { getLangFromUrl, getRouteFromUrl } from '../../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const route = getRouteFromUrl(Astro.url);
---

<div class="relative">
  <button
    id="language-toggle"
    class="outline-none flex items-center gap-1 text-heading-2 rounded-full p-2 lg:p-3 border border-box-border hover:bg-slate-200 dark:hover:bg-slate-800"
    aria-label="Select language"
    aria-expanded="false"
    aria-controls="language-menu"
  >
    <svg 
      xmlns="http://www.w3.org/2000/svg" 
      fill="none" 
      viewBox="0 0 24 24" 
      stroke-width="1.5" 
      stroke="currentColor" 
      class="w-6 h-6"
      aria-hidden="true"
    >
      <path 
        stroke-linecap="round" 
        stroke-linejoin="round" 
        d="M10.5 21l5.25-11.25L21 21m-9-3h7.5M3 5.621a48.474 48.474 0 016-.371m0 0c1.12 0 2.233.038 3.334.114M9 5.25V3m3.334 2.364C11.176 10.658 7.69 15.08 3 17.502m9.334-12.138c.896.061 1.785.147 2.666.257m-4.589 8.495a18.023 18.023 0 01-3.827-5.802" 
      />
    </svg>
    <span class="text-sm font-medium">{lang.toUpperCase()}</span>
  </button>

  <div
    id="language-menu"
    class="absolute right-0 mt-2 py-2 w-32 bg-white dark:bg-slate-800 rounded-lg shadow-lg border border-box-border hidden"
    role="menu"
  >
    {
      Object.entries(languages).map(([l, label]) => {
        const localizedPath = `/${l}${route}`;
        return (
          <a
            href={localizedPath}
            class={`block px-4 py-2 text-sm hover:bg-slate-100 dark:hover:bg-slate-700 ${
              lang === l ? "text-accent-500 font-medium" : "text-heading-2"
            }`}
            role="menuitem"
            aria-current={lang === l ? "page" : undefined}
          >
            {label}
          </a>
        );
      })
    }
  </div>
</div>

<script>
  function setupLanguageSelector() {
    const toggle = document.getElementById("language-toggle");
    const menu = document.getElementById("language-menu");

    if (!toggle || !menu) return;

    function showMenu() {
      menu.classList.remove("hidden");
      toggle.setAttribute("aria-expanded", "true");
    }

    function hideMenu() {
      menu.classList.add("hidden");
      toggle.setAttribute("aria-expanded", "false");
    }

    toggle.addEventListener("click", (e) => {
      e.stopPropagation();
      menu.classList.contains("hidden") ? showMenu() : hideMenu();
    });

    // Close menu when clicking outside
    document.addEventListener("click", (e) => {
      if (!toggle.contains(e.target as Node) && !menu.contains(e.target as Node)) {
        hideMenu();
      }
    });

    // Keyboard navigation
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && !menu.classList.contains("hidden")) {
        hideMenu();
      }
    });
  }

  // Initialize when the DOM is ready
  document.addEventListener("DOMContentLoaded", setupLanguageSelector);
</script>